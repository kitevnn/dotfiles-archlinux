* 🔨 Working in Proress(文档施工中ing.....)

** 💡 MEME

[[./MEME/EmacsTheTrueEditor.png]]

** 📰 一些负责任的话

请真的不要滥抄我个人的配置，很负责任地说这并不是说劝退什么的

更加重要的原因，只是因为符合个人习惯的不一定会适合您的习惯

还是推荐您先观看一下 [[https://www.bilibili.com/video/BV1Fb421v7ZV][daily tsoding - one thing every programmer must have]] 这个视频

*仅供参考*

** 🎑 GNU Emacs快捷键风格

| 序号 | 快捷键前缀(prefix-key) | 解释意义            |
|------+-----------------------+--------------------|
|    1 | ~C-z C-p~             | *<p>* rocess       |
|    2 | ~C-z C-s~             | *<s>* witch window |
|    3 | ~C-z C-t~             | *<t>* heme         |
|    4 | ~C-z C-b~             | *<b>* uffer        |
|    5 | ~C-z C-w~             | resize *<w>* indow |
|    6 | ~C-z C-d~             | *<d>* ashboard     |
|    7 | ~C-z C-x~             | te *<x>* t         |
|    8 | ~C-z C-r~             | *<r>* oam          |
|    9 | ~C-z C-a~             | *<a>* genda        |
|   10 | ~C-z C-z~             | *<custom>*         |

** 🔧 安装一步到位

在 [[file:org/dotfiles.org][dotfiles.org]] 通过 ~M-x org-babel-tangle~ 管理 

** 🔑 有趣的实现

*** 1. GNU Emacs总使用时长

从 ~2025年 01月 26日 星期日 13:55:28 CST~ 重新开始累计

#+begin_quote
Accompanying With GNU Emacs: 6 hours, 34 minutes, 7 seconds
#+end_quote

实现过程(展示代码，从而来证明我自己并没有乱写时间上去，因为每次的时间都依赖于 ~(emacs-uptime)~ 此el函数来获取)

*bash方面*
#+begin_src sh
  #!/bin/bash

  # 基本路径配置
  user="une"
  path1=".config/emacs/archive"
  path2=".config/emacs/elisp/site-lisp/sh"
  filename="uptime"

  # 存储文件路径
  file1="/home/${user}/${path1}/${filename}"
  file2="/home/${user}/${path2}/${filename}"

  # 初始化总时间
  total_seconds=0

  # 逐行读取文件内容
  while IFS= read -r line; do
    # 匹配并提取小时、分钟和秒
    if [[ "$line" =~ Uptime:\ ([0-9]+)\ hours?,\ ([0-9]+)\ minutes?,\ ([0-9]+)\ seconds? ]]; then
      hours=${BASH_REMATCH[1]}
      minutes=${BASH_REMATCH[2]}
      seconds=${BASH_REMATCH[3]}
    elif [[ "$line" =~ Uptime:\ ([0-9]+)\ minutes?,\ ([0-9]+)\ seconds? ]]; then
      hours=0
      minutes=${BASH_REMATCH[1]}
      seconds=${BASH_REMATCH[2]}
    elif [[ "$line" =~ Uptime:\ ([0-9]+)\ seconds? ]]; then
      hours=0
      minutes=0
      seconds=${BASH_REMATCH[1]}
    else
      # 如果不匹配任何已知格式，跳过这行
      continue
    fi

    # 将时间转换为秒
    total_seconds=$((total_seconds + hours * 3600 + minutes * 60 + seconds))

  done < "$file1"

  # 可选：将秒数转换为小时:分钟:秒 格式
  total_hours=$((total_seconds / 3600))
  remaining_minutes=$(((total_seconds % 3600) / 60))
  remaining_seconds=$((total_seconds % 60))

  # 输出总时间
  echo "Accompanying With GNU Emacs: $total_hours hours, $remaining_minutes minutes, $remaining_seconds seconds"
  echo "Accompanying With GNU Emacs: $total_hours hours, $remaining_minutes minutes, $remaining_seconds seconds" > "$file2"  
#+end_src

*elisp方面*
#+begin_src elisp
  ;; =======================================
  ;; 路径变量 (~/.config/emacs/elisp/basic/basic-file.el)
  ;; =======================================  
  (defvar directory-site-lisp               "elisp/site-lisp/sh/")                     ; emacs配置文件路径的modeline部分

  ;; =======================================
  ;; 手动更新已使用的GNU Emacs累加时长 (~/.config/emacs/elisp/custom/custom-defun.el)
  ;; =======================================
  (defun my-save-emacs-uptime ()
    "通过设置钩子hooks，在每次退出Emacs后，自动保存emacs-uptime数据到指定文件内"
    (let ((uptime (emacs-uptime)))
      (with-temp-buffer
        (insert (format "Uptime: %s\n" uptime))
        (append-to-file (point-min) (point-max)  (concat user-emacs-directory directory-emacs-archive "uptime")))))

  (defun my-show-emacs-uptime ()
    "通过site-lisp的sh脚本实现，获取Emacs的累计使用总时长"
    (interactive)
    (let ((uptime-output
           (string-trim (shell-command-to-string
                         (concat user-emacs-directory directory-site-lisp "calculate-uptime.sh")))))
      (insert uptime-output)))


  ;; =======================================
  ;; 更新 calculate-uptime.sh 脚本输出的钩子 (~/.config/emacs/elisp/hooks/hooks-hook.el)
  ;; =======================================
  (add-hook 'kill-emacs-hook 'my-save-emacs-uptime)                            ; 在退出Emacs时保存当前uptime  
#+end_src

*我自己的改进思路*

当前必须退出后1个Emacs进程后，才能统计本次的累计使用总时长，这是因为保存了的是逐渐递增的emacs-uptime，而非增量

+ 保存的是增量emacs-uptime-DELTA，而不是逐渐递增的emacs-uptime

  #+begin_quote
  抽象一个根据 ~(emacs-uptime)~ 的变量，作为增量时间 ~(defvar emacs-uptime-delta "")~

  使得每次执行函数 ~my-save-emacs-uptime~ 后

  能模仿emacs-uptime的字符串(如Uptime: 1 hours, 55 minutes, 33 seconds)

  保存到指定的文件中

  (以后有空再弄.....因为这几天我自己已经配置了接近20小时的GNU Emacs了......下次再弄下次再弄)
  #+end_quote

  
